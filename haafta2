import math

# 1. Noktaların Tanımlanması
points = [((
points = [

points 

poi
1, 2), (4, 6)), ((3, 5), (7, 9)), ((0, 0), (5, 5))]

# 2. Öklid Mesafesi İçin Fonksiyon

d
def euclideanDistance(point1, point2):
    x1, y1 = point1
    x2, y2 = point2
    
    x1, y1 = point1
    x2, y2 = point2
    retur

    x1, y1 = point1
    x2, y2 = point2
    r

    x1, y1 = point1
    x2, y2 = point2
 

    x1, y1 = point1
    x2, y2 = poin

    x1, y1 = point1
    x2, y2 =

    x1, y1 = point1
    x2,

    x1, y1 = point1
  

    x1, y1 = poin

    x1, y1 =

    x1,

  
return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

# 3. Mesafelerin Hesaplanması
distances = []

distances

dis
for point1, point2 in points:
    distance = euclideanDistance(point1, point2)
    distances.append(distance)


    distance = euclideanDistance(point1, point2)
    distances.append(distanc

    distance = euclideanDistance(point1, point2)
    distances.append(

    distance = euclideanDistance(point1, point2)
    distances.

    distance = euclideanDistance(point1, point2)
    dis

    distance = euclideanDistance(point1, point2)

    distance = euclideanDistance(point1, 

    distance = euclideanDistance(

    distance = euclideanD

    distance = eu

    dista

   
# 4. Minimum Mesafenin Bulunması
min_distance = 
min_distanc
min(distances)

# Sonuçların Yazdırılması

prin
print("Mesafeler:", distances)

pr
print("Minimum mesafe:", min_distance)
